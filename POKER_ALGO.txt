Algo Poker IA:
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

TODO :

- parametres à prendre en compte:
	- valeur de la main ( avec tapis) entre 0 et 1 => utiliser handvalue helper pour cela
	- etape en cours (0: pre flop, 0.25: flop  0.5: turn 0.75:river)
	- winLose on garde
	- coups des joueurs en fold check et raise on garde



TRAINING:

200000 => 30 minutes


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DONE:


Player:
	
	
	
	
	fin de main: 
	ecriture dans fichier log les coups joues à chaque tour (write asynch)

Croupier:


	gestion du gagnant et don des chips

	lors du message start => enregistrer dans playerMemo le pot total (chips * nb joueurs)

	nouvelle main => enregistrer dans le tableau des toursDetails l'ordre des joueurs pour associer un id joueur à une position du tour + creer une methode qui retourne pour un id joueur donne et un numero de tour donne la position du joueur dans ce tour

					 creation d'une nouvelle map de playerBets (cfr gestion mises joueurs)



	gestion des mises des joueurs => a inject dans playerMemo

coup d'un joueur => enregistrer dans le tour en cours dans la map des joueurs id le coup joue. Objete de type map{
		[idJoueur : [mise1,mise2,mise3...]],...
	}





------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


- Listeners:
	TCPListener: ecoute les arrivées TCPListener et emet 3 types d'events
		3 events possibles: 
			1) otherPlayerEvent => emit an event with other player datas
			2) playEvent => emit event to allow our playEvent
			3) turnEndEvent => emit event when turns end and winner is designated
			
	OtherPlayerListener: ce listener capte l'event otherPlayerEvent et lance les actions necessaires
		- emet un TurnUpdateEvent : Le TurnUpdateListener capte les data et sauve le coup du joueur dans un objet Turn: objet qui garde en memoire les actions de chaque joueur pour le tour en cour
		- 
		
	PlayListener: capte le playEvent et lance les actions necessaires:
		- lance le machine learning => quand fini emit event pour repondre
		- lance le hardcoded
		- lance le chrono => a total - 2 secondes  oblige envoie reponse => si timeout => on annule le listener sur l'event et on renvoie la reponse random
	
	
	
	TurnEndListener: 
		- maj de la DB dee machine learning
		
		
		
		
	TurnClass:
		- currPosition
		- nbPlayer
		- arrayPlayers ( position: mise: 
		
	PartieClass:
	- arrayPlayers ( argent )